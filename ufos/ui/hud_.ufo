// ==================
// HUD INTERFACE
// ==================

// Components for the soldier number strings

component cmp_str_soldier_shadow extends string
{
	size		"24 20"
	color		"0 0 0 1"
	ghost		true
	font		"f_verysmall"
	contentalign	ALIGN_CL
}
component cmp_str_soldier extends string
{
	size		"24 20"
	color		"0 .6 0 1"
	ghost		true
	font		"f_verysmall"
	contentalign	ALIGN_CL
}

// Component the extends for soldier head models

component cmp_model_head extends model
{
	autoscale	true
	size		"50 78"
	ghost		true
}

// Components for the soldier status bars

component cmp_bar_health extends bar
{
	size		"66 6"
	color		".8 0 0 0.7"
	disabled	true
	tooltip		"_Health"
}
component cmp_bar_morale extends bar
{
	size		"66 6"
	color		".8 .8 0 0.7"
	disabled	true
	tooltip		"_Morale"
}
component cmp_bar_time extends bar
{
	size		"66 6"
	color		".2 .2 1 0.9"
	disabled	true
	tooltip		"_TUs"
}

// Component for the spotted enemies string (used by altHUD and defaultHUD)

component cmp_str_numspotted extends string
{
	string		*cvar:mn_numaliensspotted
	onClick		{ cmd "nextalien;" }
	onRClick	{ cmd "prevalien;" }
	onWheelUp	{ cmd "nextalien;" }
	onWheelDown	{ cmd "prevalien;" }
	onMouseEnter { *node:this@font = "f_small_bold" }
	onMouseLeave { *node:this@font = "f_small" }
	contentalign	ALIGN_CC
}


component cmpFiremodeEntry extends panel {
	{
		pos		"0 0"
		size	"214 63"
		align	LAYOUTALIGN_TOP
	}

	image bg
	{
		src	"hud/firemode"
		pos		"0 0"
		texl	"0 0"
		texh	"214  63"
		size	"214  63"
		onMouseEnter { *node:this@src = "hud/firemode_hover" }
		onMouseLeave { *node:this@src = "hud/firemode" }
		onClick	{
			cmd "ui_close <path:root>;"
			cmd "hud_executeaction <node:parent.actionid@string>;"
		}
		onRClick {
			cmd "ui_close <path:root>;"
		}
	}

	image cb
	{
		src	"hud/checkbox"
		tooltip	"_Check to use this firemode for reaction fire"
		pos		"0 32"
		texl	"0 0"
		texh	"31 31"
		onClick	{
			cmd "hud_selectreactionfiremode <node:parent.hand@string> <node:parent.index@string>;"
		}
	}

	/** store the actionid */
	string actionid {
		size	"0 0"
		invis	true
	}

	/** store the hand */
	string hand {
		size	"0 0"
		invis	true
	}

	/** store the index of the firemode */
	string index {
		size	"0 0"
		invis	true
	}

	string name
	{
		pos "27 4"
		size "183 25"
		contentalign ALIGN_CL
		ghost true
	}
	string tu_label {
		pos "17 32"
		size "50 28"
		contentalign ALIGN_CR
		ghost true
		string		"_TU:"
		font		"f_verysmall"
	}
	string tu
	{
		pos "67 32"
		size "29 28"
		contentalign ALIGN_CL
		ghost true
		font		"f_verysmall"
	}
	string shot_label {
		pos "99 32"
		size "80 28"
		contentalign ALIGN_CR
		ghost true
		string		"_Shots:"
		font		"f_verysmall"
	}
	string shot
	{
		pos "179 32"
		size "30 28"
		contentalign ALIGN_CL
		ghost true
		font		"f_verysmall"
	}

	/**
	 * @param<1> id
	 * @param<2> hand (char) (l or r for left or right)
	 * @param<3> firedef index (int)
	 * @param<4> firedef reaction fire (int) (1= true, 0= false)
	 * @param<5> status (1 available, 0 need more TU)
	 * @param<6> name (string)
	 * @param<7> TUs (string)
	 * @param<8> shots (string)
	 * @param<9> tooltip
	 */
	func init {
		*node:parent.actionid@string = "<1>"
		*node:parent.hand@string = "<2>"
		*node:parent.index@string = "<3>"

		*node:parent.name@string = "<6>"
		*node:parent.tu@string = "<7>"
		*node:parent.shot@string = "<8>"
		*node:parent.tu@tooltip = "<9>"

		if ( <5> eq "1" ) {
			*node:parent.bg@texl = "0 0"
			*node:parent.bg@texh = "214 63"
		} else {
			*node:parent.bg@texl = "0 64"
			*node:parent.bg@texh = "214 128"
		}

		if ( <4> eq "0" ) {
			*node:parent.cb@invis = true
		}
	}

	/**
	 * @param<1> activate (1=activate, 0=deactivate)
	 */
	func init_reaction {
		if ( <1> eq "1" ) {
			*node:parent.cb@texl = "0 32"
			*node:parent.cb@texh = "31 63"
			*node:parent.cb@invis = false
		} else {
			*node:parent.cb@texl = "0 0"
			*node:parent.cb@texh = "31 31"
			*node:parent.cb@invis = false
		}
	}
}

window levelbuttons {
	/**
	 * @brief Updates the level status
	 * @param <1> Level id (0-7)
	 * @param <2> State
	 *   0 = disabled (map doesn't have this level),
	 *   1 = available (user can switch to this level)
	 *   2 = active (the current selected level)
	 */
	confunc updateLevelStatus { }
}

window reactionfire_listener {
	/**
	 * @brief The reaction fire mode was changed
	 * @note no parameters
	 */
	confunc reactionfire_updated { }
	/**
	 * @brief Cvar listener callback - used in the firemode panels
	 * @note no parameters
	 */
	confunc actor_updated { }
}

/**
 * @brief Define interface shared by all huds.
 * @note called "ahud" to be loaded before another huds
 * @todo rename the interface confuncs
 */
window hud extends levelbuttons {

	/**
	 * This is called when the hud is initially pushed onto the stack - only called once per battlescape match
	 */
	confunc hudinit { }
	/**
	 * This is called when you select one of your actors
	 * @param <1> the actor index
	 */
	confunc hudselect { }
	/**
	 * This is called for each actor in your team to enable the actor selection buttons
	 * @param <1> the actor index
	 */
	confunc hudenable { }
	/**
	 * This is called for each actor slot that is not used, or when an actor died
	 * @param <1> the actor index
	 */
	confunc huddisable { cmd "updateactorvalues <1> \"\" \"0\" \"1\" \"0\" \"1\" \"0\" \"1\" \"0\" \"\";" }

	confunc deselect_primaryleft { }
	confunc deselect_primaryright { }
	confunc deselect_reloadleft { }
	confunc deselect_reloadright { }
	/**
	 * This is called on a repeating loop when the selected soldier's stance
	 * is crouched.
	 */
	confunc deselect_stand { }
	/**
	 * This is called on a repeating loop when the selected soldier's stance
	 * is standing.
	 */
	confunc deselect_crouch { }
	confunc deselect_reaction { }
	confunc deselect_headgear { }

	/**
	 * This is called when the selected actor enters/leaves an area that allows him to interact
	 * with the world (e.g. opening a door
	 */
	confunc enable_clientaction { }
	confunc disable_clientaction { }

	/**
	 * This is called when a rescuezone is available in the given map
	 */
	confunc enable_rescuezone { }
	/**
	 * This is called when no rescuezone is available in the given map
	 */
	confunc disable_rescuezone { }

	confunc disable_primaryleft { }
	confunc disable_primaryright { }
	confunc disable_reloadleft { }
	confunc disable_reloadright { }
	/**
	 * These confuncs are called when the selected soldier no longer
	 * has enough TUs to change stance. disable_stand is called if this
	 * this condition is reached while the soldier was standing.
	 * disable_crouch is called if this condition is reached while the
	 * soldier was crouching.
	 */
	confunc disable_stand { }
	confunc disable_crouch { }
	confunc disable_reaction { }
	confunc disable_headgear { }

	/* Prevent time for crouch */
	confunc crouch_checkbox_disable { }
	confunc crouch_checkbox_clear { }
	confunc crouch_checkbox_check { }

	confunc reserve_shot_clear { }

	confunc reserve_shot_check { }

	confunc reserve_shot_disable { }

	confunc startreaction { }
	confunc startreaction_impos { }

	confunc startround { }
	confunc endround { }

	/**
	 * @brief Adds a new possible target to the list of reaction fire targets for the given shooter
	 * @param <1> shooter entity number
	 * @param <2> target entity number
	 * @param <3> shooter head model
	 * @param <4> shooter head skin
	 * @param <5> boolean whether shooter is a robot
	 * @param <6> TUs left until rf is triggered
	 * @param <7> Out of range = 1, in range = 0
	 * @param <8> Name of the selected firedef of the shooter
	 */
	confunc reactionfire_addtarget { }

	/**
	 * @brief The target is no longer in the reaction fire scope of the shooter
	 * @param <1> shooter entity number
	 * @param <2> target entity number
	 */
	confunc reactionfire_removetarget { }

	/**
	 * @brief Called when the amount of TUs that are needed to trigger the reaction fire changed.
	 * This might e.g. happen if the target is moving in front of the shooter.
	 * @param <1> shooter entity number
	 * @param <2> target entity number
	 * @param <3> TUs left until rf is triggered
	 * @param <4> Out of range = 1, in range = 0
	 */
	confunc reactionfire_updatetarget { }

	// confuncs to show/hide inventory, physdat and radar windows
	confunc show_hide_inventory
	{
		// a second click will close the inventory window again
		if ( *cvar:inventory_window_open == 1 ) {
			cmd "ui_close hudinv;"
		} else {
			cmd "ui_push hudinv;"
		}
	}
	confunc show_hide_physdat
	{
		// a second click will close the physdat window again
		if ( *cvar:physdat_window_open == 1 ) {
			cmd "ui_close hudphysdat;"
		} else {
			cmd "ui_push hudphysdat;"
		}
	}

	/**
	 * @param <1> the id of the soldier (starting at 0)
	 * @param <2> the model path of the head model
	 * @param <3> the hp of the actor
	 * @param <4> the max hp of the actor
	 * @param <5> the tus of the actor
	 * @param <6> the max tus of the actor
	 * @param <7> the morale of the actor
	 * @param <8> the max morale of the actor
	 * @param <9> the stun value of the actor
	 * @param <10> the tooltip
	 */
	confunc updateactorvalues {
		*cvar:mn_head<1> = "<2>"
		*cvar:mn_hp<1> = "<3>"
		*cvar:mn_hpmax<1> = "<4>"
		*cvar:mn_tu<1> = "<5>"
		*cvar:mn_tumax<1> = "<6>"
		*cvar:mn_morale<1> = "<7>"
		*cvar:mn_moralemax<1> = "<8>"
		*cvar:mn_stun<1> = "<9>"
		*cvar:mn_soldier<1>_tt = "<10>"
	}

	confunc clean_firemode_entries {
		call *node:root.firemodes.dock@removeAllChild
	}

	/**
	 * @param<1> hand [l|r]
	 * @param<2> firedef id (int)
	 * @param<3> name (string)
	 * @param<4> TUs (string)
	 * @param<5> shots (int)
	 * @param<6> reaction [0|1]
	 * @param<7> status [0|1]
	 * @param<6> firedef selected [0|1]
	 */
	confunc add_firemode_entry
	{
		call *node:root.firemodes.dock@createChild ( "<1><2>" , "cmpFiremodeEntry" )
		*node:root.firemodes.dock.<1><2>.hand@string = <1>
		*node:root.firemodes.dock.<1><2>.id@string = <2>
		*node:root.firemodes.dock.<1><2>.name@string = <3>
		*node:root.firemodes.dock.<1><2>.tu@string = <4>
		*node:root.firemodes.dock.<1><2>.shot@string = <5>
	}

	panel firemodes {
		{
			layout	LAYOUT_PACK
			size	"1024 768"
		}

		panel dock {
			{
				pos				"0 0"
				size			"300 768"
				layout			LAYOUT_PACK
				padding			0
				layoutmargin	2
			}

			panel bottomMargin {
				align		LAYOUTALIGN_TOP
				size		"280 30"
			}
		}
	}
}

// ==================
//  FIREMODES (seperate lists for each weaponhand)
// ==================
/*
	fm ... firemode
	left/right/l/r  ... The hand/side of the firemode list
	name ... The name of the firemode.
	tu ... timeunits
	shots ... The number of shots one firemode will use.
	tt ... tooltip
	cb ... checkboxes
	a ... active
	ina ... inactive
	vis ... visible
	inv ... invisible
*/

window firemode_left extends reactionfire_listener {
	{
		pos			"622 0"
		size		"255 700"
		dropdown	true
		ghost		true
	}

	zone anchor
	{
		pos		"23 700"
		size	"192 0"
	}

	panel elements {
		pos		"0 0"
		size	"255 700"
	}

	func onWindowOpened {
		cmd "hud_listfiremodes firemode_listener l;"
		cmd "ui_addcvarlistener cl_selected actor_updated;"
	}

	func onWindowClosed {
		cmd "ui_removecvarlistener cl_selected actor_updated;"
	}

	/**
	 * @brief The reaction fire mode was changed
	 * @note no parameters
	 */
	confunc reactionfire_updated {
		cmd "hud_listfiremodes firemode_listener l;"
	}

	confunc actor_updated {
		cmd "ui_pop;"
	}
}

window firemode_right extends reactionfire_listener {
	{
		pos			"164 0"
		size		"255 700"
		dropdown	true
		ghost		true
	}

	zone anchor
	{
		pos		"23 700"
		size	"192 0"
	}

	panel elements {
		pos		"0 0"
		size	"255 700"
	}

	func onWindowOpened {
		cmd "hud_listfiremodes firemode_listener r;"
		cmd "ui_addcvarlistener cl_selected actor_updated;"
	}

	func onWindowClosed {
		cmd "ui_removecvarlistener cl_selected actor_updated;"
	}

	/**
	 * @brief The reaction fire mode was changed
	 * @note no parameters
	 */
	confunc reactionfire_updated {
		cmd "hud_listfiremodes firemode_listener r;"
	}

	confunc actor_updated {
		cmd "ui_pop;"
	}
}

window hud_general {

	func hide_firemodes {
		call *node:firemode_left.elements@removeAllChild
		call *node:firemode_right.elements@removeAllChild
	}

	confunc firemode_listener {
		if (<1> eq "begin") {
			call *node:parent.hide_firemodes
			*cvar:i = 1
		} elif (<1> eq "firemode") {
			// @todo use autolayout instead of @top
			*cvar:side = <3>

			if (<3> eq "l") {
				call *node:firemode_left.elements@createChild("<2>", "cmpFiremodeEntry")
				*node:firemode_left.elements.<2>@top = (*node:firemode_left.elements@height - (63 * *cvar:i))
				call *node:firemode_left.elements.<2>.init(<2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>)
			} else {
				call *node:firemode_right.elements@createChild("<2>", "cmpFiremodeEntry")
				*node:firemode_right.elements.<2>@top = (*node:firemode_right.elements@height - (63 * *cvar:i))
				call *node:firemode_right.elements.<2>.init(<2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>)
			}
			*cvar:i = (*cvar:i + 1)

		} elif (<1> eq "reaction") {
			// node: "firemode" command for action <2> already called
			if (<3> eq "l") {
				call *node:firemode_left.elements.<2>.init_reaction(<4>)
			} else {
				call *node:firemode_right.elements.<2>.init_reaction(<4>)
			}
		} elif (<1> eq "reload") {
		} elif (<1> eq "end") {
			delete *cvar:i
			delete *cvar:side
		} else {
			cmd "echo firemode_listener: unknown \"<1>\" command;"
		}
	}

}

window hud_chat
{
	{
		pos				"200 500"
		size			"800 250"
		background	"ui/popup_alpha_tile"
		dragbutton	true
		closebutton	true
		string	"_Chat"
		ghost true
	}

	panel allchats {
		{
			pos				"0 50"
			size			"800 200"
			layout			LAYOUT_BORDER
			padding	18
		}

		tab selectchat {
			{
				align	LAYOUTALIGN_TOP
				height	40
				cvar	*cvar:mn_chatselect
				onChange {
					if ( *cvar:mn_chatselect eq "irc" ) {
						*node:parent.ircscreen@invis = false
						*node:parent.chatscreen@invis = true
						cmd "irc_connect;"
						call *node:root.hud_activate_chat_textentry
					}
					if ( *cvar:mn_chatselect eq "chat" ) {
						*node:parent.ircscreen@invis = true
						*node:parent.chatscreen@invis = false
						call *node:root.hud_activate_chat_textentry
					}
				}
			}

			option chat {
				label	"_Party chat"
				value	"chat"
			}
			option irc {
				label	"_Global lobby (IRC)"
				value	"irc"
			}
		}

		panel ircscreen {
			{
				layout			LAYOUT_BORDER
				align			LAYOUTALIGN_MIDDLE
				layoutMargin	5
				padding			5
				invis			true
			}

			panel users {
				{
					width			"200"
					layout			LAYOUT_BORDER
					align			LAYOUTALIGN_RIGHT
					layoutMargin	5
					padding			0
				}

				textlist list
				{
					lineheight	22
					dataid		TEXT_IRCUSERS
					rows		"27"
					onClick		{ cmd "irc_userlist_click <lineselected>;" }
					onRClick	{ cmd "irc_userlist_rclick <lineselected>;" }
					onViewChange {
						*node:parent.scroll@fullsize = <fullsize>
						*node:parent.scroll@current = <viewpos>
						*node:parent.scroll@viewsize = <viewsize>
					}
				}

				vscrollbar scroll {
					image		"ui/scrollbar_v_green"
					align		LAYOUTALIGN_RIGHT
					onChange 	{
						*node:parent.list@viewpos = <current>
					}
				}
			}

			text irc
			{
				dataid		TEXT_IRCCONTENT
				align		LAYOUTALIGN_MIDDLE
				font		"f_verysmall"
				rows		"10"
				lineheight	"16"
				padding		5
				onViewChange {
					*node:parent.irc_scroll@fullsize = <fullsize>
					*node:parent.irc_scroll@viewsize = <viewsize>
					*node:parent.irc_scroll@current = <viewpos>
				}
			}

			vscrollbar irc_scroll {
				image		"ui/scrollbar_v_green"
				align		LAYOUTALIGN_RIGHT
				onChange 	{
					*node:parent.irc@viewpos = <current>
				}
			}

			panel input {
				{
					layout			LAYOUT_PACK
					layoutMargin	5
					align			LAYOUTALIGN_BOTTOM
					height			25
				}

				string say_label {
					align		LAYOUTALIGN_LEFT
					width		"50"
					contentalign	ALIGN_CL
					string		"_Say:"
				}

				textentry say {
					align		LAYOUTALIGN_FILL
					background		"ui/button_green_verysmall"
					string		*cvar:irc_send_buffer
					color 		"0 .78 0 1"
					selectcolor	"1 1 1 1"
					contentalign	ALIGN_CL
					padding		8
					font		"f_verysmall"
					clickoutabort	true
					onChange	{
						cmd "irc_chanmsg;"
						call *node:root.hud_activate_chat_textentry
					}
				}
			}
		}

		panel chatscreen {
			{
				layout			LAYOUT_BORDER
				align			LAYOUTALIGN_MIDDLE
				layoutMargin	5
				padding			5
			}

			text chat
			{
				dataid		TEXT_CHAT_WINDOW
				align		LAYOUTALIGN_MIDDLE
				font		"f_verysmall"
				rows		"10"
				lineheight	"16"
				padding		5
				onViewChange {
					*node:parent.chat_scroll@fullsize = <fullsize>
					*node:parent.chat_scroll@viewsize = <viewsize>
					*node:parent.chat_scroll@current = <viewpos>
				}
			}

			vscrollbar chat_scroll {
				image		"ui/scrollbar_v_green"
				align		LAYOUTALIGN_RIGHT
				onChange 	{
					*node:parent.chat@viewpos = <current>
				}
			}

			panel input {
				{
					layout			LAYOUT_PACK
					layoutMargin	5
					align			LAYOUTALIGN_BOTTOM
					height			25
				}

				string say_label {
					align		LAYOUTALIGN_LEFT
					width		"50"
					contentalign	ALIGN_CL
					string		"_Say:"
				}
				checkbox_green chat_team
				{
					width		"20"
					pos			"0 4"
					current		*cvar:mn_chat_team
					align		LAYOUTALIGN_LEFT
					tooltip		"_Team chat"
				}

				textentry say {
					align		LAYOUTALIGN_FILL
					background		"ui/button_green_verysmall"
					string		*cvar:mn_entry
					color 		"0 .78 0 1"
					selectcolor	"1 1 1 1"
					contentalign	ALIGN_CL
					padding		8
					font		"f_verysmall"
					clickoutabort	true
					onChange	{
						if ( *cvar:mn_chat_team eq "1" ) {
							cmd "say_team \"<node:this@string>\";"
						} else {
							cmd "say \"<node:this@string>\";"
						}
						*cvar:mn_entry = ""
						call *node:root.hud_activate_chat_textentry
					}
				}
			}
		}
	}

	func hud_activate_chat_textentry {
		call *node:root.allchats.chatscreen.input.say@edit
	}

	func hud_activate_irc_textentry {
		call *node:root.allchats.ircscreen.input.say@edit
	}

	func onWindowOpened {
		*cvar:mn_chatselect = "chat"
		call *node:root.hud_activate_chat_textentry
	}
}
