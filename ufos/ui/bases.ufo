// ===============
// BASEMANAGEMENT
// ===============

component cmpBaseButton extends button
{
	background		"ui/button_green_small"
	size		"230 35"
	color		"0 0.8 0 1"
	selectcolor "1 1 1 1"
	font		"f_menu"
}

component cmpBuildingSpace extends panel
{
	{
		size	"230 25"
	}
	string label
	{
		pos				"0 0"
		size			"140 15"
		font			"f_verysmall"
		color			"0 0.8 0 1"
		contentalign	ALIGN_CL
	}
	string data
	{
		pos				"140 0"
		size			"90 15"
		font			"f_verysmall"
		color			"0 0.8 0 1"
		contentalign	ALIGN_CR
	}
	bar data_bar
	{
		pos		"3 15"
		size	"224 5"
		color	"0 0.8 0 1"
		bordercolor	"0 0.8 0 1"
		border	1
		current	0
		max		100
		readonly	true
	}
}

window bases
{
	/** @todo Remove me */
	{ } // empty properties to fix parsing problem with "image" token (behaviour or property?)

	// ==================
	// background
	// ==================

	image back_ul
	{
		src		"ui/base_ul"
		pos			"0 0"
	}

	image back_ur
	{
		src		"ui/base_ur"
		pos			"512 0"
	}

	image back_lr
	{
		src		"ui/base_lr"
		pos			"512 256"
	}

	cmpBaseHeader baseHeader {
	}

	// here we need the back-to-geoscape button
	button bt_back_to_geoscape
	{
		tooltip		"_Back to geoscape"
		icon		"icons/geoscape"
		background	"buttons/big_blue"
		pos			"950 20"
		size		"59 55"
		onClick		{ *cvar:mn_lastsubmenu = "bases" cmd "ui_pop;" }
	}

	basemap thebasemap
	{
		pos			"0 96"
		size		"721 672"
	}

	// ===============
	// buttons
	// ===============
	panel base_buttons
	{
		{
			pos "758 118"
			size "230 640"
			layout		LAYOUT_TOP_DOWN_FLOW
			layoutMargin	6
		}

		cmpBaseButton buildings
		{
			string		"_Buildings"
			tooltip		"_Build base facilities"
			onClick		{ cmd "ui_push buildings;" }
		}

		cmpBaseButton aircraft
		{
			string		"_Aircraft"
			tooltip		"_Aircraft management and crew equipment"
			onClick		{ cmd "ui_push aircraft;" }
		}

		cmpBaseButton buysell
		{
			string		"_Buy/Sell"
			tooltip		"_Buy/Sell equipment, aircraft and UGV"
			onClick		{ cmd "ui_push market;" }
		}

		cmpBaseButton transfer
		{
			string		"_Transfer"
			tooltip		"_Transfer equipment, aircraft, UGV, aliens and employees to other bases"
			onClick		{ cmd "ui_push transfer;" }
		}

		cmpBaseButton research
		{
			string		"_Research"
			tooltip		"_Research new technology"
			onClick		{ cmd "ui_push research;" }
		}

		cmpBaseButton production
		{
			string		"_Production"
			tooltip		"_Produce equipment, aircraft and UGV"
			onClick		{ cmd "ui_push production;" }
		}

		cmpBaseButton hire
		{
			string		"_Employees"
			tooltip		"_Hire or dismiss employees"
			onClick		{ cmd "ui_push employees;" }
		}

		cmpBaseButton containment
		{
			string		"_Containment"
			tooltip		"_Manage captured aliens"
			onClick		{ cmd "ui_push aliencont;" }
		}

		cmpBaseButton hospital
		{
			string		"_Hospital"
			tooltip		"_Treat wounded soldiers and perform implant surgery"
			onClick		{ cmd "ui_push hospital;" }
		}

		cmpBaseButton summary
		{
			string		"_Base Summary"
			tooltip		"_Information about this base (available storage space, production, research, etc.)"
			onClick		{ cmd "ui_push basesummary;" }
		}
		panel spacer { size "230 10" }

		/*
		 * Bars indicating storage/living/lab/workshop space are added with
		 * confunc show_bld_space
		 */
		panel bld_space
		{
			{
				size	"230 130"
				layout		LAYOUT_TOP_DOWN_FLOW
				layoutMargin	1
			}
		}

		/*
		 * Panel showing how many soldiers, scientists and engineers are in the base
		 */
		panel cur_employees
		{
			{
				size	"230 70"
			}
			button soldier
			{
				tooltip	"_Soldiers"
				icon	"icons/bighead_soldier"
				pos		"4 0"
				size	"42 42"
			}
			string soldier_val
			{
				tooltip	"_Soldiers"
				pos		"30 40"
				size	"30 15"
				font			"f_verysmall"
				color			"0 0.8 0 1"
				contentalign	ALIGN_CL
			}
			button pilot
			{
				tooltip	"_Pilots"
				icon	"icons/bighead_pilot"
				pos		"64 0"
				size	"42 42"
			}
			string pilot_val
			{
				tooltip	"_Pilots"
				pos		"90 40"
				size	"30 15"
				font			"f_verysmall"
				color			"0 0.8 0 1"
				contentalign	ALIGN_CL
			}
			button scientist
			{
				tooltip	"_Scientists"
				icon	"icons/bighead_scientist"
				pos		"124 0"
				size	"42 42"
			}
			string scientist_val
			{
				tooltip	"_Scientists"
				pos		"150 40"
				size	"30 15"
				font			"f_verysmall"
				color			"0 0.8 0 1"
				contentalign	ALIGN_CL
			}
			button worker
			{
				tooltip	"_Workers"
				icon	"icons/bighead_worker"
				pos		"184 0"
				size	"42 42"
			}
			string worker_val
			{
				tooltip	"_Workers"
				pos		"210 40"
				size	"30 15"
				font			"f_verysmall"
				color			"0 0.8 0 1"
				contentalign	ALIGN_CL
			}
		}

		/*
		 * Passes information on building space for living quarters, storage
		 * workshop and lab.
		 * param1 = name
		 * param2 = type (building_lab,building_quarters,building_storage,building_workshop,building_amstorage)
		 * param3 = current
		 * param4 = capacity
		 */
		confunc show_bld_space
		{
			/* Don't show building space if building is not completed (max = 0) */
			if (param4 != 0) {
				call *node:parent.bld_space@createChild ( "<2>", "cmpBuildingSpace" )
				*node:parent.bld_space.<2>.label@string = "<1>"
				*node:parent.bld_space.<2>.data@string = "<3>/<4>"
				*node:parent.bld_space.<2>.data_bar@max = <4>
				if ( <3> <= <4> ) {
					*node:parent.bld_space.<2>.data_bar@current = <3>
				} else {
					*node:parent.bld_space.<2>.data_bar@current = <4>
					*node:parent.bld_space.<2>.data_bar@color = "1 0 0 1"
					*node:parent.bld_space.<2>.data_bar@bordercolor = "1 0 0 1"
				}
			}
		}

		/*
		 * Prepare the building space indicators.
		 * Bases which are missing a facility will not call show_bld_space.
		 * This ensures all indicators appear even if there is no bld space.
		 * @todo: Make anti-matter show 0/0 if it is researched but no bld
		 *        is present.
		 */
		confunc clear_bld_space
		{
			call *node:parent.bld_space@removeAllChild
		}


		/*
		 * Current employees of a particular base
		 * param1 = number of soldiers
		 * param1 = number of pilots
		 * param3 = number of scientists
		 * param4 = number of workers
		 */
		confunc current_employees
		{
			*node:parent.cur_employees.soldier_val@string = "<1>"
			*node:parent.cur_employees.pilot_val@string = "<2>"
			*node:parent.cur_employees.scientist_val@string = "<3>"
			*node:parent.cur_employees.worker_val@string = "<4>"
		}

		/*
		 * Show the base's aircraft (not currently used in default UI)
		 * param1 = id (in list of aircraft in base -- not global idx)
		 * param2 = name
		 * param3 = aircraft template (model)
		 * param4 = status
		 * param5 = (1 = aircraft is in base, 0 = aircraft is not in base)
		 */
		confunc clear_aircraft { }
		confunc show_aircraft { }

		/*
		 * Show a research item in the base overview (not used in default UI)
		 * param1 = name
		 * param2 = number of scientists working on it
		 * param3 = percent complete
		 */
		confunc clear_research { }
		confunc show_research { }

		/*
		 * Show the production item closest to completion in the base overview (not used in default UI)
		 * param1 = name
		 * param2 = percent complete
		 */
		confunc clear_production { }
		confunc show_production { }
	}
	confunc update_basebutton
	{
		*node:root.base_buttons.<1>@disabled = <2>
		*node:root.base_buttons.<1>@tooltip = <3>
	}

	// this confunc checks which base submenu was opened before and reopens it only if available and functional in the currently opened base
	confunc check_and_switch_submenu
	{
		if ( ( *cvar:mn_lastsubmenu eq "aircraft" ) && ( *node:bases.base_buttons.aircraft@disabled == false ) ) { cmd "ui_push aircraft;" }
		elif ( ( *cvar:mn_lastsubmenu eq "aliencont" ) && ( *node:bases.base_buttons.containment@disabled == false ) ) { cmd "ui_push aliencont;" }
		elif ( ( *cvar:mn_lastsubmenu eq "employees" ) && ( *node:bases.base_buttons.hire@disabled == false ) ) { cmd "ui_push employees;" }
		// hospital is a special case, because it has a submenu window: hospital_employee
		elif ( ( *cvar:mn_lastsubmenu eq "hospital" ) && ( *node:bases.base_buttons.hospital@disabled == false ) ) { cmd "ui_push hospital;" }
		elif ( ( *cvar:mn_lastsubmenu eq "hospital_employee" ) && ( *node:bases.base_buttons.hospital@disabled == true ) ) { cmd "ui_close hospital;" }
		elif ( ( *cvar:mn_lastsubmenu eq "hospital_employee" ) && ( *node:bases.base_buttons.hospital@disabled == false ) ) { cmd "ui_push hospital;" }
		elif ( ( *cvar:mn_lastsubmenu eq "market" ) && ( *node:bases.base_buttons.buysell@disabled == false ) ) { cmd "ui_push market;" }
		elif ( ( *cvar:mn_lastsubmenu eq "production" ) && ( *node:bases.base_buttons.production@disabled == false ) ) { cmd "ui_push production;" }
		elif ( ( *cvar:mn_lastsubmenu eq "research" ) && ( *node:bases.base_buttons.research@disabled == false ) ) { cmd "ui_push research;" }
		// the following submenus are valid for every base, so those do not need an additional availability check
		elif ( *cvar:mn_lastsubmenu eq "buildings" ) { cmd "ui_push buildings;" }
		elif ( *cvar:mn_lastsubmenu eq "transfer" ) { cmd "ui_push transfer;" }
		elif ( *cvar:mn_lastsubmenu eq "basesummary" ) { cmd "ui_push basesummary;" }
		// no submenu was open before or the submenu opened is not valid (should rather not happen, but this is a fail-safe protection),
		// reset cvar mn_lastsubmenu to "bases"
		else { *cvar:mn_lastsubmenu = "bases" }
	}

	func onWindowOpened
	{
		cmd "base_init;"
		// just check_and_switch_submenu if the last submenu was not "bases"
		if ( *cvar:mn_lastsubmenu ne "bases" ) { cmd "check_and_switch_submenu;" }
	}

	func onWindowClosed
	{
		*cvar:mn_lastsubmenu = "bases"
		cmd "clear_bld_space;"
	}
}
